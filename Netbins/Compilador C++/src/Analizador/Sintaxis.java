
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 31 17:40:19 COT 2020
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 31 17:40:19 COT 2020
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\006\000\002\002" +
    "\004\000\002\002\003\000\002\003\010\000\002\017\006" +
    "\000\002\020\005\000\002\020\005\000\002\021\005\000" +
    "\002\021\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\006\000\002\005\005\000" +
    "\002\005\007\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\023\004\000\002\023\005\000\002\007" +
    "\011\000\002\014\003\000\002\014\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\005\000\002\010\015\000\002\011\011\000\002" +
    "\012\013\000\002\013\011\000\002\015\004\000\002\015" +
    "\003\000\002\025\011\000\002\006\005\000\002\006\004" +
    "\000\002\006\004\000\002\016\007\000\002\026\003\000" +
    "\002\026\005\000\002\027\015\000\002\027\013\000\002" +
    "\027\007\000\002\030\011\000\002\031\006\000\002\032" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\010\004\010\013\004\061\006\001\002\000" +
    "\004\061\006\001\002\000\004\002\ufffe\001\002\000\004" +
    "\053\015\001\002\000\004\002\014\001\002\000\004\061" +
    "\006\001\002\000\004\033\012\001\002\000\004\067\013" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\004\054\016\001\002\000\004\055\017\001\002" +
    "\000\034\011\022\012\034\016\042\020\044\021\047\022" +
    "\021\027\030\030\045\031\033\032\032\034\041\035\040" +
    "\036\035\001\002\000\036\011\uffe3\012\uffe3\016\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\056\uffe3\001\002\000\004\053" +
    "\224\001\002\000\004\066\213\001\002\000\036\011\ufff0" +
    "\012\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0\056\ufff0" +
    "\001\002\000\036\011\022\012\034\016\042\020\044\021" +
    "\047\022\021\027\030\030\045\031\033\032\032\034\041" +
    "\035\040\036\035\056\212\001\002\000\036\011\ufff6\012" +
    "\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\056\ufff6\001" +
    "\002\000\036\011\uffe2\012\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\056\uffe2\001\002\000\036\011\ufff4\012\ufff4" +
    "\016\ufff4\020\ufff4\021\ufff4\022\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\056\ufff4\001\002" +
    "\000\004\053\202\001\002\000\036\011\ufff2\012\ufff2\016" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\034\ufff2\035\ufff2\036\ufff2\056\ufff2\001\002\000" +
    "\004\053\172\001\002\000\004\053\166\001\002\000\004" +
    "\066\155\001\002\000\004\053\152\001\002\000\036\011" +
    "\uffee\012\uffee\016\uffee\020\uffee\021\uffee\022\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\056" +
    "\uffee\001\002\000\036\011\uffe4\012\uffe4\016\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\056\uffe4\001\002\000\004\053\144" +
    "\001\002\000\004\053\141\001\002\000\004\053\127\001" +
    "\002\000\036\011\uffea\012\uffea\016\uffea\020\uffea\021\uffea" +
    "\022\uffea\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035" +
    "\uffea\036\uffea\056\uffea\001\002\000\004\055\117\001\002" +
    "\000\004\053\105\001\002\000\036\011\uffec\012\uffec\016" +
    "\uffec\020\uffec\021\uffec\022\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\034\uffec\035\uffec\036\uffec\056\uffec\001\002\000" +
    "\004\053\051\001\002\000\036\011\uffe5\012\uffe5\016\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\056\uffe5\001\002\000\006" +
    "\051\053\066\054\001\002\000\004\054\066\001\002\000" +
    "\006\054\uffd7\062\uffd7\001\002\000\004\046\055\001\002" +
    "\000\012\006\057\051\060\066\061\067\056\001\002\000" +
    "\006\054\uffd4\062\uffd4\001\002\000\006\006\063\066\064" +
    "\001\002\000\006\054\uffd5\062\uffd5\001\002\000\006\054" +
    "\uffd3\062\uffd3\001\002\000\006\054\uffd6\062\uffd6\001\002" +
    "\000\006\054\uffd2\062\uffd2\001\002\000\004\006\065\001" +
    "\002\000\006\054\uffd1\062\uffd1\001\002\000\004\055\067" +
    "\001\002\000\034\011\022\012\034\016\042\020\044\021" +
    "\047\022\021\027\030\030\045\031\033\032\032\034\041" +
    "\035\040\036\035\001\002\000\036\011\022\012\034\016" +
    "\042\020\044\021\047\022\021\027\030\030\045\031\033" +
    "\032\032\034\041\035\040\036\035\056\076\001\002\000" +
    "\036\011\uffe7\012\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\056\uffe7\001\002\000\036\011\ufff1\012\ufff1\016\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\056\ufff1\001\002\000\036" +
    "\011\ufff7\012\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\056\ufff7\001\002\000\036\011\uffe6\012\uffe6\016\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\056\uffe6\001\002\000\036\011" +
    "\ufff5\012\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\056" +
    "\ufff5\001\002\000\036\011\uffcf\012\uffcf\016\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\056\uffcf\001\002\000\036\011\ufff3" +
    "\012\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\036\ufff3\056\ufff3" +
    "\001\002\000\036\011\uffef\012\uffef\016\uffef\020\uffef\021" +
    "\uffef\022\uffef\027\uffef\030\uffef\031\uffef\032\uffef\034\uffef" +
    "\035\uffef\036\uffef\056\uffef\001\002\000\036\011\uffe8\012" +
    "\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\056\uffe8\001" +
    "\002\000\036\011\uffeb\012\uffeb\016\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\056\uffeb\001\002\000\036\011\uffed\012\uffed" +
    "\016\uffed\020\uffed\021\uffed\022\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\034\uffed\035\uffed\036\uffed\056\uffed\001\002" +
    "\000\036\011\uffe9\012\uffe9\016\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\056\uffe9\001\002\000\004\006\106\001\002\000" +
    "\004\044\107\001\002\000\004\066\110\001\002\000\004" +
    "\006\111\001\002\000\004\065\112\001\002\000\004\045" +
    "\113\001\002\000\004\066\114\001\002\000\004\054\115" +
    "\001\002\000\004\062\116\001\002\000\036\011\uffc3\012" +
    "\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\056\uffc3\001" +
    "\002\000\034\011\022\012\034\016\042\020\044\021\047" +
    "\022\021\027\030\030\045\031\033\032\032\034\041\035" +
    "\040\036\035\001\002\000\036\011\022\012\034\016\042" +
    "\020\044\021\047\022\021\027\030\030\045\031\033\032" +
    "\032\034\041\035\040\036\035\056\121\001\002\000\004" +
    "\021\122\001\002\000\004\053\123\001\002\000\006\051" +
    "\053\066\054\001\002\000\004\054\125\001\002\000\004" +
    "\062\126\001\002\000\036\011\uffce\012\uffce\016\uffce\020" +
    "\uffce\021\uffce\022\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\056\uffce\001\002\000\006\051" +
    "\053\066\054\001\002\000\004\054\131\001\002\000\004" +
    "\055\132\001\002\000\034\011\022\012\034\016\042\020" +
    "\044\021\047\022\021\027\030\030\045\031\033\032\032" +
    "\034\041\035\040\036\035\001\002\000\036\011\022\012" +
    "\034\016\042\020\044\021\047\022\021\027\030\030\045" +
    "\031\033\032\032\034\041\035\040\036\035\056\134\001" +
    "\002\000\040\011\uffd8\012\uffd8\016\uffd8\017\135\020\uffd8" +
    "\021\uffd8\022\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\056\uffd8\001\002\000\004\055\136" +
    "\001\002\000\034\011\022\012\034\016\042\020\044\021" +
    "\047\022\021\027\030\030\045\031\033\032\032\034\041" +
    "\035\040\036\035\001\002\000\036\011\022\012\034\016" +
    "\042\020\044\021\047\022\021\027\030\030\045\031\033" +
    "\032\032\034\041\035\040\036\035\056\140\001\002\000" +
    "\036\011\uffd0\012\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\056\uffd0\001\002\000\004\066\142\001\002\000\004" +
    "\054\143\001\002\000\036\011\uffbe\012\uffbe\016\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\056\uffbe\001\002\000\004\006" +
    "\145\001\002\000\004\066\146\001\002\000\004\006\147" +
    "\001\002\000\004\054\150\001\002\000\004\062\151\001" +
    "\002\000\036\011\uffc0\012\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\056\uffc0\001\002\000\004\066\153\001\002" +
    "\000\004\054\154\001\002\000\036\011\uffbf\012\uffbf\016" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\034\uffbf\035\uffbf\036\uffbf\056\uffbf\001\002\000" +
    "\006\037\157\062\156\001\002\000\036\011\uffdf\012\uffdf" +
    "\016\uffdf\020\uffdf\021\uffdf\022\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\056\uffdf\001\002" +
    "\000\004\006\160\001\002\000\006\006\163\066\164\001" +
    "\002\000\004\062\162\001\002\000\036\011\uffde\012\uffde" +
    "\016\uffde\020\uffde\021\uffde\022\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\034\uffde\035\uffde\036\uffde\056\uffde\001\002" +
    "\000\004\062\uffda\001\002\000\004\006\165\001\002\000" +
    "\004\062\uffd9\001\002\000\004\066\167\001\002\000\004" +
    "\054\170\001\002\000\004\062\171\001\002\000\036\011" +
    "\uffc1\012\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1\056" +
    "\uffc1\001\002\000\004\066\173\001\002\000\004\065\174" +
    "\001\002\000\004\066\175\001\002\000\004\065\176\001" +
    "\002\000\004\066\177\001\002\000\004\054\200\001\002" +
    "\000\004\062\201\001\002\000\036\011\uffc2\012\uffc2\016" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\034\uffc2\035\uffc2\036\uffc2\056\uffc2\001\002\000" +
    "\006\006\203\066\204\001\002\000\004\066\210\001\002" +
    "\000\004\054\uffc5\001\002\000\004\054\206\001\002\000" +
    "\004\062\207\001\002\000\036\011\uffc6\012\uffc6\016\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\056\uffc6\001\002\000\004" +
    "\006\211\001\002\000\004\054\uffc4\001\002\000\006\002" +
    "\ufffd\033\ufffd\001\002\000\012\037\220\047\214\050\217" +
    "\062\216\001\002\000\004\067\223\001\002\000\004\062" +
    "\222\001\002\000\036\011\uffe1\012\uffe1\016\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\056\uffe1\001\002\000\004\062\uffdb" +
    "\001\002\000\004\067\221\001\002\000\004\062\uffdc\001" +
    "\002\000\036\011\uffe0\012\uffe0\016\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\056\uffe0\001\002\000\004\062\uffdd\001\002" +
    "\000\006\011\226\066\230\001\002\000\004\054\246\001" +
    "\002\000\004\066\230\001\002\000\004\054\uffcb\001\002" +
    "\000\004\037\231\001\002\000\004\067\232\001\002\000" +
    "\004\062\233\001\002\000\006\051\053\066\054\001\002" +
    "\000\004\062\235\001\002\000\006\050\237\066\240\001" +
    "\002\000\004\054\uffca\001\002\000\004\066\244\001\002" +
    "\000\006\047\241\050\242\001\002\000\004\067\243\001" +
    "\002\000\004\054\uffc8\001\002\000\004\054\uffc9\001\002" +
    "\000\004\054\uffc7\001\002\000\004\054\uffcc\001\002\000" +
    "\004\055\247\001\002\000\034\011\022\012\034\016\042" +
    "\020\044\021\047\022\021\027\030\030\045\031\033\032" +
    "\032\034\041\035\040\036\035\001\002\000\036\011\022" +
    "\012\034\016\042\020\044\021\047\022\021\027\030\030" +
    "\045\031\033\032\032\034\041\035\040\036\035\056\251" +
    "\001\002\000\036\011\uffcd\012\uffcd\016\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\056\uffcd\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\006\002\006\003\004\001\001\000\004\003" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\023\005\024\007" +
    "\026\010\030\011\022\012\035\013\045\016\042\027\047" +
    "\030\036\031\017\032\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\072\007\074\010\076\011\071\012\077\013\102\016" +
    "\101\027\103\030\100\031\070\032\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\067\005" +
    "\024\007\026\010\030\011\022\012\035\013\045\016\042" +
    "\027\047\030\036\031\017\032\025\001\001\000\030\005" +
    "\072\007\074\010\076\011\071\012\077\013\102\016\101" +
    "\027\103\030\100\031\070\032\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\117\005\024" +
    "\007\026\010\030\011\022\012\035\013\045\016\042\027" +
    "\047\030\036\031\017\032\025\001\001\000\030\005\072" +
    "\007\074\010\076\011\071\012\077\013\102\016\101\027" +
    "\103\030\100\031\070\032\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\132\005\024\007\026\010\030\011\022\012\035\013\045" +
    "\016\042\027\047\030\036\031\017\032\025\001\001\000" +
    "\030\005\072\007\074\010\076\011\071\012\077\013\102" +
    "\016\101\027\103\030\100\031\070\032\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\136\005\024" +
    "\007\026\010\030\011\022\012\035\013\045\016\042\027" +
    "\047\030\036\031\017\032\025\001\001\000\030\005\072" +
    "\007\074\010\076\011\071\012\077\013\102\016\101\027" +
    "\103\030\100\031\070\032\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\224\025\226\001\001\000\002\001" +
    "\001\000\004\025\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\233\001\001\000\002\001\001\000\004\006\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\247\005\024\007\026\010\030\011\022\012\035\013\045" +
    "\016\042\027\047\030\036\031\017\032\025\001\001\000" +
    "\030\005\072\007\074\010\076\011\071\012\077\013\102" +
    "\016\101\027\103\030\100\031\070\032\073\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // UNSIGNED ::= Unsigned Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("UNSIGNED",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SIZEOF ::= SizeOf Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SIZEOF",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SYSTEM ::= Sistema Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SYSTEM",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LEER_T ::= Gets Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LEER_T ::= Fgets Parentesis_a Identificador Coma Identificador Coma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LEER_T ::= Scan Parentesis_a Comillas Modulo Identificador Comillas Coma Op_logico Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LEER_T",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO_PRINT ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO_PRINT ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_PRINT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINT ::= Print Parentesis_a TIPO_PRINT Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= TIPO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= T_datoN TIPO_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_SENTENCIA_B ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_SENTENCIA_B ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_SENTENCIA_B ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_SENTENCIA_B ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_SENTENCIA_B ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_SENTENCIA_B",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional TIPO_SENTENCIA_B 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_DECLARACION_C ::= Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_C",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_DECLARACION_C ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_C",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_DECLARACION_N ::= Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_DECLARACION_N ::= Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_DECLARACION_N ::= Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DECLARACION_N",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Igual TIPO_DECLARACION_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T_datoN Identificador TIPO_DECLARACION_N P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_datoN Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SIZEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= LEER_T 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA UNSIGNED 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA SIZEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA SYSTEM 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA LEER_T 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIA ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA_INCLUDE ::= Comillas LIBRERIA Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCLUDE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_INCLUDE ::= Op_relacional LIBRERIA Op_relacional 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCLUDE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INCLUDE ::= Numeral Include SENTENCIA_INCLUDE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INCLUDE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Vacio MAIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int MAIN Return Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

