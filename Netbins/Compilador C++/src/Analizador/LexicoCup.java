/* The following code was generated by JFlex 1.4.3 on 31/03/20, 5:40 p.m. */

package Analizador;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/03/20, 5:40 p.m. from the specification file
 * <tt>./src/Analizador/LexicoCup.flex</tt>
 */
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  8,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 40,  9, 43,  0, 37, 38, 10, 44, 45, 36, 34,  3, 35, 52,  7, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 51, 50, 42, 33, 41,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1, 25,  1,  1,  1,  1,  1,  1,  1, 48, 11, 49,  0,  1, 
     0, 17, 12, 15, 23, 14, 22, 21, 16,  4,  1, 29, 19, 31,  5, 20, 
    30,  1, 18, 27,  6, 24, 26, 28,  1, 13, 32, 46, 39, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\1\6"+
    "\1\7\1\10\17\2\1\11\1\12\1\13\1\14\1\15"+
    "\3\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\32\2\2\1\4"+
    "\1\33\15\2\1\34\12\2\1\17\1\35\1\16\1\0"+
    "\1\36\15\2\1\37\15\2\1\0\1\2\1\40\1\41"+
    "\1\42\1\2\1\43\1\44\1\2\1\45\6\2\1\46"+
    "\6\2\1\47\1\3\1\2\1\50\1\2\1\51\5\2"+
    "\1\52\1\2\1\53\2\2\1\54\2\2\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\2\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\65\0\65\0\65\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u0597"+
    "\0\u05cc\0\u0601\0\u04f8\0\u0636\0\u066b\0\65\0\u06a0\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\u06d5"+
    "\0\152\0\u070a\0\u073f\0\u0774\0\65\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\65\0\65\0\65"+
    "\0\u0ca1\0\152\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\152"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\152"+
    "\0\152\0\152\0\u12a2\0\152\0\152\0\u12d7\0\152\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\152\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\152\0\65\0\u1588\0\152"+
    "\0\u15bd\0\152\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\152"+
    "\0\u16fb\0\152\0\u1730\0\u1765\0\152\0\u179a\0\u17cf\0\152"+
    "\0\152\0\152\0\152\0\152\0\152\0\152\0\u1804\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\2\3\1\20\1\21\1\3\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\3\1\32\1\33\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\66\0\2\3\1\0\3\3"+
    "\5\0\25\3\26\0\1\4\65\0\1\5\4\0\1\5"+
    "\55\0\2\3\1\0\1\3\1\60\1\3\5\0\12\3"+
    "\1\61\12\3\25\0\2\3\1\0\3\3\5\0\14\3"+
    "\1\62\10\3\25\0\2\3\1\0\3\3\5\0\6\3"+
    "\1\63\16\3\33\0\1\64\31\0\1\65\24\0\2\3"+
    "\1\0\3\3\5\0\1\3\1\66\4\3\1\67\16\3"+
    "\25\0\2\3\1\0\3\3\5\0\7\3\1\70\15\3"+
    "\25\0\2\3\1\0\3\3\5\0\4\3\1\71\1\72"+
    "\17\3\25\0\2\3\1\0\3\3\5\0\2\3\1\73"+
    "\22\3\25\0\2\3\1\0\3\3\5\0\10\3\1\74"+
    "\14\3\25\0\2\3\1\0\3\3\5\0\2\3\1\75"+
    "\22\3\25\0\2\3\1\0\3\3\5\0\5\3\1\76"+
    "\1\3\1\77\1\100\1\101\13\3\25\0\2\3\1\0"+
    "\3\3\5\0\2\3\1\102\5\3\1\103\14\3\25\0"+
    "\2\3\1\0\1\3\1\104\1\3\5\0\25\3\25\0"+
    "\2\3\1\0\2\3\1\105\5\0\25\3\25\0\2\3"+
    "\1\0\3\3\5\0\10\3\1\106\14\3\25\0\2\3"+
    "\1\0\1\107\2\3\5\0\1\3\1\110\1\3\1\111"+
    "\14\3\1\112\4\3\25\0\2\3\1\0\3\3\5\0"+
    "\4\3\1\113\20\3\25\0\2\3\1\0\3\3\5\0"+
    "\6\3\1\114\16\3\25\0\2\3\1\0\3\3\5\0"+
    "\5\3\1\115\17\3\65\0\1\116\64\0\1\65\1\117"+
    "\63\0\1\65\1\0\1\117\62\0\1\65\71\0\1\120"+
    "\65\0\1\120\56\0\1\116\7\0\1\116\54\0\1\116"+
    "\10\0\1\116\55\0\1\121\22\0\2\3\1\0\2\3"+
    "\1\122\5\0\3\3\1\123\21\3\25\0\2\3\1\0"+
    "\3\3\5\0\7\3\1\124\15\3\25\0\2\3\1\0"+
    "\3\3\5\0\14\3\1\125\10\3\24\0\10\64\1\0"+
    "\54\64\1\0\2\3\1\0\2\3\1\126\5\0\25\3"+
    "\25\0\2\3\1\0\3\3\5\0\2\3\1\127\22\3"+
    "\25\0\2\3\1\0\3\3\5\0\17\3\1\130\5\3"+
    "\25\0\2\3\1\0\3\3\5\0\5\3\1\131\17\3"+
    "\25\0\2\3\1\0\3\3\5\0\17\3\1\132\5\3"+
    "\25\0\2\3\1\0\2\3\1\133\5\0\25\3\25\0"+
    "\2\3\1\0\1\3\1\134\1\3\5\0\25\3\25\0"+
    "\2\3\1\0\2\3\1\135\5\0\25\3\25\0\2\3"+
    "\1\0\3\3\5\0\7\3\1\136\15\3\25\0\2\3"+
    "\1\0\3\3\5\0\10\3\1\137\14\3\25\0\2\3"+
    "\1\0\3\3\5\0\6\3\1\140\16\3\25\0\2\3"+
    "\1\0\3\3\5\0\2\3\1\141\22\3\25\0\2\3"+
    "\1\0\3\3\5\0\12\3\1\142\12\3\25\0\2\3"+
    "\1\0\3\3\5\0\14\3\1\143\10\3\25\0\2\3"+
    "\1\0\3\3\5\0\17\3\1\144\5\3\25\0\2\3"+
    "\1\0\3\3\5\0\6\3\1\145\16\3\25\0\2\3"+
    "\1\0\1\146\2\3\5\0\25\3\25\0\2\3\1\0"+
    "\3\3\5\0\24\3\1\147\25\0\2\3\1\0\3\3"+
    "\5\0\17\3\1\150\5\3\25\0\2\3\1\0\3\3"+
    "\5\0\5\3\1\151\17\3\25\0\2\3\1\0\1\152"+
    "\2\3\5\0\25\3\25\0\2\3\1\0\1\153\2\3"+
    "\5\0\25\3\25\0\2\3\1\0\1\154\2\3\5\0"+
    "\25\3\25\0\2\3\1\0\1\155\2\3\5\0\25\3"+
    "\26\0\1\156\63\0\2\3\1\0\3\3\5\0\7\3"+
    "\1\157\15\3\25\0\2\3\1\0\3\3\5\0\7\3"+
    "\1\160\15\3\25\0\2\3\1\0\3\3\5\0\2\3"+
    "\1\161\22\3\25\0\2\3\1\0\3\3\5\0\2\3"+
    "\1\162\22\3\25\0\2\3\1\0\3\3\5\0\5\3"+
    "\1\163\17\3\25\0\2\3\1\0\3\3\5\0\2\3"+
    "\1\164\22\3\25\0\2\3\1\0\3\3\5\0\6\3"+
    "\1\162\16\3\25\0\2\3\1\0\3\3\5\0\2\3"+
    "\1\165\22\3\25\0\2\3\1\0\3\3\5\0\14\3"+
    "\1\166\10\3\25\0\2\3\1\0\3\3\5\0\11\3"+
    "\1\162\13\3\25\0\2\3\1\0\3\3\5\0\17\3"+
    "\1\167\5\3\25\0\2\3\1\0\3\3\5\0\17\3"+
    "\1\125\5\3\25\0\2\3\1\0\3\3\5\0\5\3"+
    "\1\170\17\3\25\0\2\3\1\0\2\3\1\171\5\0"+
    "\25\3\25\0\2\3\1\0\3\3\5\0\5\3\1\172"+
    "\17\3\25\0\2\3\1\0\3\3\5\0\1\173\24\3"+
    "\25\0\2\3\1\0\1\174\2\3\5\0\25\3\25\0"+
    "\2\3\1\0\1\175\2\3\5\0\25\3\25\0\2\3"+
    "\1\0\3\3\5\0\13\3\1\176\11\3\25\0\2\3"+
    "\1\0\3\3\5\0\2\3\1\177\22\3\25\0\2\3"+
    "\1\0\2\3\1\200\5\0\25\3\25\0\2\3\1\0"+
    "\1\3\1\201\1\3\5\0\25\3\25\0\2\3\1\0"+
    "\2\3\1\202\5\0\25\3\25\0\2\3\1\0\3\3"+
    "\5\0\7\3\1\203\15\3\25\0\2\3\1\0\1\3"+
    "\1\204\1\3\5\0\25\3\25\0\2\3\1\0\1\3"+
    "\1\205\1\3\5\0\25\3\26\0\1\156\52\0\1\206"+
    "\10\0\2\3\1\0\3\3\5\0\14\3\1\207\10\3"+
    "\25\0\2\3\1\0\3\3\5\0\21\3\1\210\3\3"+
    "\25\0\2\3\1\0\3\3\5\0\6\3\1\211\16\3"+
    "\25\0\2\3\1\0\2\3\1\162\5\0\25\3\25\0"+
    "\2\3\1\0\3\3\5\0\17\3\1\212\5\3\25\0"+
    "\2\3\1\0\3\3\5\0\14\3\1\213\10\3\25\0"+
    "\2\3\1\0\3\3\5\0\7\3\1\126\15\3\25\0"+
    "\2\3\1\0\3\3\5\0\11\3\1\214\13\3\25\0"+
    "\2\3\1\0\1\3\1\215\1\3\5\0\25\3\25\0"+
    "\2\3\1\0\3\3\5\0\10\3\1\216\14\3\25\0"+
    "\2\3\1\0\3\3\5\0\2\3\1\217\22\3\25\0"+
    "\2\3\1\0\3\3\5\0\12\3\1\220\12\3\25\0"+
    "\2\3\1\0\3\3\5\0\3\3\1\221\21\3\25\0"+
    "\2\3\1\0\3\3\5\0\2\3\1\222\22\3\25\0"+
    "\2\3\1\0\2\3\1\223\5\0\25\3\25\0\2\3"+
    "\1\0\3\3\5\0\13\3\1\224\11\3\25\0\2\3"+
    "\1\0\1\3\1\225\1\3\5\0\25\3\25\0\2\3"+
    "\1\0\3\3\5\0\7\3\1\226\15\3\25\0\2\3"+
    "\1\0\1\3\1\227\1\3\5\0\25\3\25\0\2\3"+
    "\1\0\3\3\5\0\11\3\1\230\13\3\25\0\2\3"+
    "\1\0\3\3\5\0\12\3\1\231\12\3\25\0\2\3"+
    "\1\0\3\3\5\0\23\3\1\232\1\3\25\0\2\3"+
    "\1\0\3\3\5\0\4\3\1\233\20\3\25\0\2\3"+
    "\1\0\3\3\5\0\12\3\1\234\12\3\25\0\2\3"+
    "\1\0\3\3\5\0\2\3\1\235\22\3\25\0\2\3"+
    "\1\0\2\3\1\236\5\0\25\3\25\0\2\3\1\0"+
    "\3\3\5\0\2\3\1\237\22\3\25\0\2\3\1\0"+
    "\3\3\5\0\13\3\1\240\11\3\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6201];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\3\11\31\1\1\11\1\1\10\11"+
    "\5\1\1\11\30\1\3\11\1\0\34\1\1\0\27\1"+
    "\1\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicoCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return new Symbol(sym.Unsigned, yychar, yyline, yytext());
          }
        case 53: break;
        case 19: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 54: break;
        case 45: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 55: break;
        case 30: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 56: break;
        case 48: 
          { return new Symbol(sym.Switch, yychar, yyline, yytext());
          }
        case 57: break;
        case 40: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 58: break;
        case 27: 
          { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
          }
        case 59: break;
        case 41: 
          { return new Symbol(sym.Fgets, yychar, yyline, yytext());
          }
        case 60: break;
        case 7: 
          { return new Symbol(sym.Comillas_S, yychar, yyline, yytext());
          }
        case 61: break;
        case 35: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 62: break;
        case 38: 
          { return new Symbol(sym.Vacio, yychar, yyline, yytext());
          }
        case 63: break;
        case 14: 
          { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
          }
        case 64: break;
        case 21: 
          { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
          }
        case 65: break;
        case 5: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 66: break;
        case 28: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 67: break;
        case 49: 
          { return new Symbol(sym.Print, yychar, yyline, yytext());
          }
        case 68: break;
        case 6: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 69: break;
        case 31: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 70: break;
        case 17: 
          { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
          }
        case 71: break;
        case 37: 
          { return new Symbol(sym.Gets, yychar, yyline, yytext());
          }
        case 72: break;
        case 11: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 73: break;
        case 51: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 74: break;
        case 20: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 75: break;
        case 42: 
          { return new Symbol(sym.Scan, yychar, yyline, yytext());
          }
        case 76: break;
        case 32: 
          { return new Symbol(sym.Nulo, yychar, yyline, yytext());
          }
        case 77: break;
        case 13: 
          { return new Symbol(sym.Modulo, yychar, yyline, yytext());
          }
        case 78: break;
        case 44: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 79: break;
        case 22: 
          { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
          }
        case 80: break;
        case 26: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 81: break;
        case 8: 
          { return new Symbol(sym.B_Slash, yychar, yyline, yytext());
          }
        case 82: break;
        case 29: 
          { return new Symbol(sym.Op_incremento, yychar, yyline, yytext());
          }
        case 83: break;
        case 36: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 84: break;
        case 39: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 85: break;
        case 18: 
          { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
          }
        case 86: break;
        case 34: 
          { return new Symbol(sym.T_datoN, yychar, yyline, yytext());
          }
        case 87: break;
        case 46: 
          { return new Symbol(sym.SizeOf, yychar, yyline, yytext());
          }
        case 88: break;
        case 23: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 89: break;
        case 12: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 90: break;
        case 50: 
          { return new Symbol(sym.Include, yychar, yyline, yytext());
          }
        case 91: break;
        case 10: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 92: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 93: break;
        case 16: 
          { return new Symbol(sym.Numeral, yychar, yyline, yytext());
          }
        case 94: break;
        case 43: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 95: break;
        case 25: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 96: break;
        case 24: 
          { return new Symbol(sym.Dos_P, yychar, yyline, yytext());
          }
        case 97: break;
        case 4: 
          { /*Ignore*/
          }
        case 98: break;
        case 9: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 99: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 100: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 101: break;
        case 15: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 102: break;
        case 47: 
          { return new Symbol(sym.Sistema, yychar, yyline, yytext());
          }
        case 103: break;
        case 33: 
          { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
