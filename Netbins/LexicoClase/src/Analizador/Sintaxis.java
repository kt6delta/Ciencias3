
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 28 03:02:30 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 28 03:02:30 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\003\012\000\002\003" +
    "\010\000\002\002\007\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\007\000\002\005\007\000\002\005\014\000\002\005\013" +
    "\000\002\005\007\000\002\005\007\000\002\005\011\000" +
    "\002\005\007\000\002\005\011\000\002\005\006\000\002" +
    "\005\006\000\002\005\010\000\002\005\010\000\002\005" +
    "\011\000\002\005\011\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\006\000" +
    "\002\010\007\000\002\010\004\000\002\010\005\000\002" +
    "\006\011\000\002\006\012\000\002\006\012\000\002\007" +
    "\015\000\002\007\016\000\002\011\023\000\002\011\022" +
    "\000\002\011\022\000\002\011\017\000\002\011\023\000" +
    "\002\012\013\000\002\012\014\000\002\012\014\000\002" +
    "\013\012\000\002\013\013\000\002\013\013\000\002\014" +
    "\015\000\002\014\014\000\002\015\010\000\002\016\005" +
    "\000\002\016\010\000\002\017\006\000\002\020\006\000" +
    "\002\023\006\000\002\024\006\000\002\025\006\000\002" +
    "\021\007\000\002\021\007\000\002\022\010\000\002\026" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\006\053\006\061\005\001\002\000\004\032" +
    "\u0124\001\002\000\004\016\u0120\001\002\000\004\045\011" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\046\012\001\002\000\004\047\013\001\002" +
    "\000\046\006\020\007\036\010\016\012\043\013\032\014" +
    "\037\015\041\021\047\024\050\025\031\026\015\027\053" +
    "\030\025\031\017\032\034\056\052\060\044\061\024\001" +
    "\002\000\032\006\ufff8\007\ufff8\010\ufff8\020\ufff8\022\ufff8" +
    "\024\ufff8\026\ufff8\032\ufff8\050\ufff8\060\ufff8\061\ufff8\064" +
    "\ufff8\001\002\000\004\056\u011b\001\002\000\004\045\u0109" +
    "\001\002\000\004\056\u0103\001\002\000\010\043\343\051" +
    "\341\056\342\001\002\000\032\006\ufff3\007\ufff3\010\ufff3" +
    "\020\ufff3\022\ufff3\024\ufff3\026\ufff3\032\ufff3\050\ufff3\060" +
    "\ufff3\061\ufff3\064\ufff3\001\002\000\032\006\uffed\007\uffed" +
    "\010\uffed\020\uffed\022\uffed\024\uffed\026\uffed\032\uffed\050" +
    "\uffed\060\uffed\061\uffed\064\uffed\001\002\000\024\006\020" +
    "\007\063\010\016\024\050\026\015\032\034\050\340\060" +
    "\044\061\024\001\002\000\004\017\334\001\002\000\004" +
    "\045\331\001\002\000\032\006\ufff7\007\ufff7\010\ufff7\020" +
    "\ufff7\022\ufff7\024\ufff7\026\ufff7\032\ufff7\050\ufff7\060\ufff7" +
    "\061\ufff7\064\ufff7\001\002\000\032\006\ufff6\007\ufff6\010" +
    "\ufff6\020\ufff6\022\ufff6\024\ufff6\026\ufff6\032\ufff6\050\ufff6" +
    "\060\ufff6\061\ufff6\064\ufff6\001\002\000\032\006\ufff1\007" +
    "\ufff1\010\ufff1\020\ufff1\022\ufff1\024\ufff1\026\ufff1\032\ufff1" +
    "\050\ufff1\060\ufff1\061\ufff1\064\ufff1\001\002\000\004\045" +
    "\322\001\002\000\004\045\304\001\002\000\032\006\uffeb" +
    "\007\uffeb\010\uffeb\020\uffeb\022\uffeb\024\uffeb\026\uffeb\032" +
    "\uffeb\050\uffeb\060\uffeb\061\uffeb\064\uffeb\001\002\000\004" +
    "\056\277\001\002\000\032\006\ufffa\007\ufffa\010\ufffa\020" +
    "\ufffa\022\ufffa\024\ufffa\026\ufffa\032\ufffa\050\ufffa\060\ufffa" +
    "\061\ufffa\064\ufffa\001\002\000\006\004\276\056\071\001" +
    "\002\000\004\045\215\001\002\000\032\006\uffef\007\uffef" +
    "\010\uffef\020\uffef\022\uffef\024\uffef\026\uffef\032\uffef\050" +
    "\uffef\060\uffef\061\uffef\064\uffef\001\002\000\004\045\177" +
    "\001\002\000\032\006\ufff2\007\ufff2\010\ufff2\020\ufff2\022" +
    "\ufff2\024\ufff2\026\ufff2\032\ufff2\050\ufff2\060\ufff2\061\ufff2" +
    "\064\ufff2\001\002\000\004\047\134\001\002\000\032\006" +
    "\uffe9\007\uffe9\010\uffe9\020\uffe9\022\uffe9\024\uffe9\026\uffe9" +
    "\032\uffe9\050\uffe9\060\uffe9\061\uffe9\064\uffe9\001\002\000" +
    "\032\006\ufff4\007\ufff4\010\ufff4\020\ufff4\022\ufff4\024\ufff4" +
    "\026\ufff4\032\ufff4\050\ufff4\060\ufff4\061\ufff4\064\ufff4\001" +
    "\002\000\032\006\ufffc\007\ufffc\010\ufffc\020\ufffc\022\ufffc" +
    "\024\ufffc\026\ufffc\032\ufffc\050\ufffc\060\ufffc\061\ufffc\064" +
    "\ufffc\001\002\000\004\056\127\001\002\000\004\006\124" +
    "\001\002\000\032\006\ufff5\007\ufff5\010\ufff5\020\ufff5\022" +
    "\ufff5\024\ufff5\026\ufff5\032\ufff5\050\ufff5\060\ufff5\061\ufff5" +
    "\064\ufff5\001\002\000\012\034\112\035\111\036\113\037" +
    "\110\001\002\000\004\047\060\001\002\000\032\006\ufff0" +
    "\007\ufff0\010\ufff0\020\ufff0\022\ufff0\024\ufff0\026\ufff0\032" +
    "\ufff0\050\ufff0\060\ufff0\061\ufff0\064\ufff0\001\002\000\032" +
    "\006\uffee\007\uffee\010\uffee\020\uffee\022\uffee\024\uffee\026" +
    "\uffee\032\uffee\050\uffee\060\uffee\061\uffee\064\uffee\001\002" +
    "\000\032\006\uffea\007\uffea\010\uffea\020\uffea\022\uffea\024" +
    "\uffea\026\uffea\032\uffea\050\uffea\060\uffea\061\uffea\064\uffea" +
    "\001\002\000\032\006\uffec\007\uffec\010\uffec\020\uffec\022" +
    "\uffec\024\uffec\026\uffec\032\uffec\050\uffec\060\uffec\061\uffec" +
    "\064\uffec\001\002\000\046\006\020\007\036\010\016\012" +
    "\043\013\032\014\037\015\041\021\047\024\050\025\031" +
    "\026\015\027\053\030\025\031\017\032\034\056\052\060" +
    "\044\061\024\001\002\000\024\006\020\007\063\010\016" +
    "\024\050\026\015\032\034\050\066\060\044\061\024\001" +
    "\002\000\032\006\ufffd\007\ufffd\010\ufffd\020\ufffd\022\ufffd" +
    "\024\ufffd\026\ufffd\032\ufffd\050\ufffd\060\ufffd\061\ufffd\064" +
    "\ufffd\001\002\000\004\056\071\001\002\000\032\006\ufff9" +
    "\007\ufff9\010\ufff9\020\ufff9\022\ufff9\024\ufff9\026\ufff9\032" +
    "\ufff9\050\ufff9\060\ufff9\061\ufff9\064\ufff9\001\002\000\032" +
    "\006\ufffb\007\ufffb\010\ufffb\020\ufffb\022\ufffb\024\ufffb\026" +
    "\ufffb\032\ufffb\050\ufffb\060\ufffb\061\ufffb\064\ufffb\001\002" +
    "\000\004\056\067\001\002\000\004\054\070\001\002\000" +
    "\032\006\uffb2\007\uffb2\010\uffb2\020\uffb2\022\uffb2\024\uffb2" +
    "\026\uffb2\032\uffb2\050\uffb2\060\uffb2\061\uffb2\064\uffb2\001" +
    "\002\000\006\033\073\042\072\001\002\000\004\005\102" +
    "\001\002\000\004\005\074\001\002\000\006\005\075\056" +
    "\076\001\002\000\004\054\101\001\002\000\004\005\077" +
    "\001\002\000\004\054\100\001\002\000\032\006\uffd7\007" +
    "\uffd7\010\uffd7\020\uffd7\022\uffd7\024\uffd7\026\uffd7\032\uffd7" +
    "\050\uffd7\060\uffd7\061\uffd7\064\uffd7\001\002\000\032\006" +
    "\uffd9\007\uffd9\010\uffd9\020\uffd9\022\uffd9\024\uffd9\026\uffd9" +
    "\032\uffd9\050\uffd9\060\uffd9\061\uffd9\064\uffd9\001\002\000" +
    "\006\005\103\056\104\001\002\000\004\054\107\001\002" +
    "\000\004\005\105\001\002\000\004\054\106\001\002\000" +
    "\032\006\uffd8\007\uffd8\010\uffd8\020\uffd8\022\uffd8\024\uffd8" +
    "\026\uffd8\032\uffd8\050\uffd8\060\uffd8\061\uffd8\064\uffd8\001" +
    "\002\000\032\006\uffda\007\uffda\010\uffda\020\uffda\022\uffda" +
    "\024\uffda\026\uffda\032\uffda\050\uffda\060\uffda\061\uffda\064" +
    "\uffda\001\002\000\004\056\122\001\002\000\004\056\120" +
    "\001\002\000\004\056\116\001\002\000\004\056\114\001" +
    "\002\000\004\054\115\001\002\000\032\006\uffb6\007\uffb6" +
    "\010\uffb6\020\uffb6\022\uffb6\024\uffb6\026\uffb6\032\uffb6\050" +
    "\uffb6\060\uffb6\061\uffb6\064\uffb6\001\002\000\004\054\117" +
    "\001\002\000\032\006\uffb5\007\uffb5\010\uffb5\020\uffb5\022" +
    "\uffb5\024\uffb5\026\uffb5\032\uffb5\050\uffb5\060\uffb5\061\uffb5" +
    "\064\uffb5\001\002\000\004\054\121\001\002\000\032\006" +
    "\uffb7\007\uffb7\010\uffb7\020\uffb7\022\uffb7\024\uffb7\026\uffb7" +
    "\032\uffb7\050\uffb7\060\uffb7\061\uffb7\064\uffb7\001\002\000" +
    "\004\054\123\001\002\000\032\006\uffb8\007\uffb8\010\uffb8" +
    "\020\uffb8\022\uffb8\024\uffb8\026\uffb8\032\uffb8\050\uffb8\060" +
    "\uffb8\061\uffb8\064\uffb8\001\002\000\004\056\125\001\002" +
    "\000\004\054\126\001\002\000\032\006\uffe8\007\uffe8\010" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\026\uffe8\032\uffe8\050\uffe8" +
    "\060\uffe8\061\uffe8\064\uffe8\001\002\000\004\062\130\001" +
    "\002\000\046\006\020\007\036\010\016\012\043\013\032" +
    "\014\037\015\041\021\047\024\050\025\031\026\015\027" +
    "\053\030\025\031\017\032\034\056\052\060\044\061\024" +
    "\001\002\000\024\006\020\007\063\010\016\020\132\024" +
    "\050\026\015\032\034\060\044\061\024\001\002\000\004" +
    "\054\133\001\002\000\036\006\uffbc\007\uffbc\010\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\032\uffbc" +
    "\050\uffbc\060\uffbc\061\uffbc\064\uffbc\001\002\000\050\006" +
    "\020\007\036\010\016\012\043\013\032\014\037\015\041" +
    "\021\047\022\136\024\050\025\031\026\015\027\053\030" +
    "\025\031\017\032\034\056\052\060\044\061\024\001\002" +
    "\000\026\006\020\007\063\010\016\022\162\024\050\026" +
    "\015\032\034\050\163\060\044\061\024\001\002\000\046" +
    "\006\020\007\036\010\016\012\043\013\032\014\037\015" +
    "\041\021\047\024\050\025\031\026\015\027\053\030\025" +
    "\031\017\032\034\056\052\060\044\061\024\001\002\000" +
    "\024\006\020\007\063\010\016\024\050\026\015\032\034" +
    "\050\140\060\044\061\024\001\002\000\004\013\141\001" +
    "\002\000\004\045\142\001\002\000\006\044\144\056\145" +
    "\001\002\000\004\046\160\001\002\000\006\046\uffd6\054" +
    "\uffd6\001\002\000\006\040\146\041\147\001\002\000\010" +
    "\046\uffd0\054\uffd0\056\157\001\002\000\012\005\151\044" +
    "\152\056\153\057\150\001\002\000\006\046\uffd4\054\uffd4" +
    "\001\002\000\006\005\154\056\155\001\002\000\006\046" +
    "\uffd5\054\uffd5\001\002\000\006\046\uffd3\054\uffd3\001\002" +
    "\000\006\046\uffd2\054\uffd2\001\002\000\004\005\156\001" +
    "\002\000\006\046\uffd1\054\uffd1\001\002\000\006\046\uffcf" +
    "\054\uffcf\001\002\000\004\054\161\001\002\000\032\006" +
    "\uffc3\007\uffc3\010\uffc3\020\uffc3\022\uffc3\024\uffc3\026\uffc3" +
    "\032\uffc3\050\uffc3\060\uffc3\061\uffc3\064\uffc3\001\002\000" +
    "\004\050\171\001\002\000\004\013\164\001\002\000\004" +
    "\045\165\001\002\000\006\044\144\056\145\001\002\000" +
    "\004\046\167\001\002\000\004\054\170\001\002\000\032" +
    "\006\uffc4\007\uffc4\010\uffc4\020\uffc4\022\uffc4\024\uffc4\026" +
    "\uffc4\032\uffc4\050\uffc4\060\uffc4\061\uffc4\064\uffc4\001\002" +
    "\000\004\013\172\001\002\000\004\045\173\001\002\000" +
    "\006\044\144\056\145\001\002\000\004\046\175\001\002" +
    "\000\004\054\176\001\002\000\032\006\uffc2\007\uffc2\010" +
    "\uffc2\020\uffc2\022\uffc2\024\uffc2\026\uffc2\032\uffc2\050\uffc2" +
    "\060\uffc2\061\uffc2\064\uffc2\001\002\000\004\056\200\001" +
    "\002\000\004\046\201\001\002\000\004\047\202\001\002" +
    "\000\004\021\047\001\002\000\006\021\047\023\204\001" +
    "\002\000\004\062\212\001\002\000\004\023\206\001\002" +
    "\000\004\062\207\001\002\000\046\006\020\007\036\010" +
    "\016\012\043\013\032\014\037\015\041\021\047\024\050" +
    "\025\031\026\015\027\053\030\025\031\017\032\034\056" +
    "\052\060\044\061\024\001\002\000\024\006\020\007\063" +
    "\010\016\024\050\026\015\032\034\050\211\060\044\061" +
    "\024\001\002\000\032\006\uffbe\007\uffbe\010\uffbe\020\uffbe" +
    "\022\uffbe\024\uffbe\026\uffbe\032\uffbe\050\uffbe\060\uffbe\061" +
    "\uffbe\064\uffbe\001\002\000\046\006\020\007\036\010\016" +
    "\012\043\013\032\014\037\015\041\021\047\024\050\025" +
    "\031\026\015\027\053\030\025\031\017\032\034\056\052" +
    "\060\044\061\024\001\002\000\024\006\020\007\063\010" +
    "\016\024\050\026\015\032\034\050\214\060\044\061\024" +
    "\001\002\000\032\006\uffbd\007\uffbd\010\uffbd\020\uffbd\022" +
    "\uffbd\024\uffbd\026\uffbd\032\uffbd\050\uffbd\060\uffbd\061\uffbd" +
    "\064\uffbd\001\002\000\006\006\216\056\217\001\002\000" +
    "\004\056\247\001\002\000\006\042\220\054\221\001\002" +
    "\000\004\057\233\001\002\000\006\044\144\056\145\001" +
    "\002\000\004\054\223\001\002\000\004\056\224\001\002" +
    "\000\004\043\225\001\002\000\004\046\226\001\002\000" +
    "\004\047\227\001\002\000\004\022\230\001\002\000\046" +
    "\006\020\007\036\010\016\012\043\013\032\014\037\015" +
    "\041\021\047\024\050\025\031\026\015\027\053\030\025" +
    "\031\017\032\034\056\052\060\044\061\024\001\002\000" +
    "\024\006\020\007\063\010\016\024\050\026\015\032\034" +
    "\050\232\060\044\061\024\001\002\000\032\006\uffc6\007" +
    "\uffc6\010\uffc6\020\uffc6\022\uffc6\024\uffc6\026\uffc6\032\uffc6" +
    "\050\uffc6\060\uffc6\061\uffc6\064\uffc6\001\002\000\004\054" +
    "\234\001\002\000\006\044\144\056\145\001\002\000\004" +
    "\054\236\001\002\000\004\056\237\001\002\000\004\042" +
    "\240\001\002\000\004\057\241\001\002\000\004\046\242" +
    "\001\002\000\004\047\243\001\002\000\004\022\244\001" +
    "\002\000\046\006\020\007\036\010\016\012\043\013\032" +
    "\014\037\015\041\021\047\024\050\025\031\026\015\027" +
    "\053\030\025\031\017\032\034\056\052\060\044\061\024" +
    "\001\002\000\024\006\020\007\063\010\016\024\050\026" +
    "\015\032\034\050\246\060\044\061\024\001\002\000\032" +
    "\006\uffc8\007\uffc8\010\uffc8\020\uffc8\022\uffc8\024\uffc8\026" +
    "\uffc8\032\uffc8\050\uffc8\060\uffc8\061\uffc8\064\uffc8\001\002" +
    "\000\004\042\250\001\002\000\004\057\251\001\002\000" +
    "\004\054\252\001\002\000\006\044\144\056\145\001\002" +
    "\000\004\054\254\001\002\000\004\056\255\001\002\000" +
    "\006\042\256\043\257\001\002\000\004\057\265\001\002" +
    "\000\004\046\260\001\002\000\004\047\261\001\002\000" +
    "\004\022\262\001\002\000\046\006\020\007\036\010\016" +
    "\012\043\013\032\014\037\015\041\021\047\024\050\025" +
    "\031\026\015\027\053\030\025\031\017\032\034\056\052" +
    "\060\044\061\024\001\002\000\024\006\020\007\063\010" +
    "\016\024\050\026\015\032\034\050\264\060\044\061\024" +
    "\001\002\000\032\006\uffc7\007\uffc7\010\uffc7\020\uffc7\022" +
    "\uffc7\024\uffc7\026\uffc7\032\uffc7\050\uffc7\060\uffc7\061\uffc7" +
    "\064\uffc7\001\002\000\004\046\266\001\002\000\004\047" +
    "\267\001\002\000\050\006\020\007\036\010\016\012\043" +
    "\013\032\014\037\015\041\021\047\022\271\024\050\025" +
    "\031\026\015\027\053\030\025\031\017\032\034\056\052" +
    "\060\044\061\024\001\002\000\024\006\020\007\063\010" +
    "\016\022\274\024\050\026\015\032\034\060\044\061\024" +
    "\001\002\000\046\006\020\007\036\010\016\012\043\013" +
    "\032\014\037\015\041\021\047\024\050\025\031\026\015" +
    "\027\053\030\025\031\017\032\034\056\052\060\044\061" +
    "\024\001\002\000\024\006\020\007\063\010\016\024\050" +
    "\026\015\032\034\050\273\060\044\061\024\001\002\000" +
    "\032\006\uffc9\007\uffc9\010\uffc9\020\uffc9\022\uffc9\024\uffc9" +
    "\026\uffc9\032\uffc9\050\uffc9\060\uffc9\061\uffc9\064\uffc9\001" +
    "\002\000\004\050\275\001\002\000\032\006\uffc5\007\uffc5" +
    "\010\uffc5\020\uffc5\022\uffc5\024\uffc5\026\uffc5\032\uffc5\050" +
    "\uffc5\060\uffc5\061\uffc5\064\uffc5\001\002\000\032\006\uffb1" +
    "\007\uffb1\010\uffb1\020\uffb1\022\uffb1\024\uffb1\026\uffb1\032" +
    "\uffb1\050\uffb1\060\uffb1\061\uffb1\064\uffb1\001\002\000\006" +
    "\033\301\054\300\001\002\000\032\006\uffe7\007\uffe7\010" +
    "\uffe7\020\uffe7\022\uffe7\024\uffe7\026\uffe7\032\uffe7\050\uffe7" +
    "\060\uffe7\061\uffe7\064\uffe7\001\002\000\004\057\302\001" +
    "\002\000\004\054\303\001\002\000\032\006\uffe0\007\uffe0" +
    "\010\uffe0\020\uffe0\022\uffe0\024\uffe0\026\uffe0\032\uffe0\050" +
    "\uffe0\060\uffe0\061\uffe0\064\uffe0\001\002\000\006\044\144" +
    "\056\145\001\002\000\004\046\306\001\002\000\004\047" +
    "\307\001\002\000\050\006\020\007\036\010\016\012\043" +
    "\013\032\014\037\015\041\021\047\022\311\024\050\025" +
    "\031\026\015\027\053\030\025\031\017\032\034\056\052" +
    "\060\044\061\024\001\002\000\026\006\020\007\063\010" +
    "\016\022\315\024\050\026\015\032\034\050\316\060\044" +
    "\061\024\001\002\000\046\006\020\007\036\010\016\012" +
    "\043\013\032\014\037\015\041\021\047\024\050\025\031" +
    "\026\015\027\053\030\025\031\017\032\034\056\052\060" +
    "\044\061\024\001\002\000\024\006\020\007\063\010\016" +
    "\024\050\026\015\032\034\050\313\060\044\061\024\001" +
    "\002\000\004\054\314\001\002\000\032\006\uffbf\007\uffbf" +
    "\010\uffbf\020\uffbf\022\uffbf\024\uffbf\026\uffbf\032\uffbf\050" +
    "\uffbf\060\uffbf\061\uffbf\064\uffbf\001\002\000\004\050\320" +
    "\001\002\000\004\054\317\001\002\000\032\006\uffc1\007" +
    "\uffc1\010\uffc1\020\uffc1\022\uffc1\024\uffc1\026\uffc1\032\uffc1" +
    "\050\uffc1\060\uffc1\061\uffc1\064\uffc1\001\002\000\004\054" +
    "\321\001\002\000\032\006\uffc0\007\uffc0\010\uffc0\020\uffc0" +
    "\022\uffc0\024\uffc0\026\uffc0\032\uffc0\050\uffc0\060\uffc0\061" +
    "\uffc0\064\uffc0\001\002\000\006\056\324\057\323\001\002" +
    "\000\004\046\327\001\002\000\004\046\325\001\002\000" +
    "\004\054\326\001\002\000\032\006\uffb4\007\uffb4\010\uffb4" +
    "\020\uffb4\022\uffb4\024\uffb4\026\uffb4\032\uffb4\050\uffb4\060" +
    "\uffb4\061\uffb4\064\uffb4\001\002\000\004\054\330\001\002" +
    "\000\032\006\uffb3\007\uffb3\010\uffb3\020\uffb3\022\uffb3\024" +
    "\uffb3\026\uffb3\032\uffb3\050\uffb3\060\uffb3\061\uffb3\064\uffb3" +
    "\001\002\000\004\056\332\001\002\000\004\046\333\001" +
    "\002\000\032\006\uffb9\007\uffb9\010\uffb9\020\uffb9\022\uffb9" +
    "\024\uffb9\026\uffb9\032\uffb9\050\uffb9\060\uffb9\061\uffb9\064" +
    "\uffb9\001\002\000\004\056\335\001\002\000\004\057\336" +
    "\001\002\000\004\054\337\001\002\000\032\006\uffe4\007" +
    "\uffe4\010\uffe4\020\uffe4\022\uffe4\024\uffe4\026\uffe4\032\uffe4" +
    "\050\uffe4\060\uffe4\061\uffe4\064\uffe4\001\002\000\004\002" +
    "\uffff\001\002\000\006\052\365\057\364\001\002\000\010" +
    "\033\350\042\346\043\347\001\002\000\004\056\344\001" +
    "\002\000\004\054\345\001\002\000\032\006\uffdb\007\uffdb" +
    "\010\uffdb\020\uffdb\022\uffdb\024\uffdb\026\uffdb\032\uffdb\050" +
    "\uffdb\060\uffdb\061\uffdb\064\uffdb\001\002\000\004\057\357" +
    "\001\002\000\004\054\356\001\002\000\004\057\351\001" +
    "\002\000\006\054\352\055\353\001\002\000\032\006\uffde" +
    "\007\uffde\010\uffde\020\uffde\022\uffde\024\uffde\026\uffde\032" +
    "\uffde\050\uffde\060\uffde\061\uffde\064\uffde\001\002\000\004" +
    "\057\354\001\002\000\004\054\355\001\002\000\032\006" +
    "\uffdd\007\uffdd\010\uffdd\020\uffdd\022\uffdd\024\uffdd\026\uffdd" +
    "\032\uffdd\050\uffdd\060\uffdd\061\uffdd\064\uffdd\001\002\000" +
    "\032\006\uffdc\007\uffdc\010\uffdc\020\uffdc\022\uffdc\024\uffdc" +
    "\026\uffdc\032\uffdc\050\uffdc\060\uffdc\061\uffdc\064\uffdc\001" +
    "\002\000\006\054\360\055\361\001\002\000\032\006\uffe1" +
    "\007\uffe1\010\uffe1\020\uffe1\022\uffe1\024\uffe1\026\uffe1\032" +
    "\uffe1\050\uffe1\060\uffe1\061\uffe1\064\uffe1\001\002\000\004" +
    "\057\362\001\002\000\004\054\363\001\002\000\032\006" +
    "\uffdf\007\uffdf\010\uffdf\020\uffdf\022\uffdf\024\uffdf\026\uffdf" +
    "\032\uffdf\050\uffdf\060\uffdf\061\uffdf\064\uffdf\001\002\000" +
    "\004\052\375\001\002\000\004\056\366\001\002\000\004" +
    "\042\367\001\002\000\004\047\370\001\002\000\004\057" +
    "\371\001\002\000\004\057\372\001\002\000\004\050\373" +
    "\001\002\000\004\054\374\001\002\000\032\006\uffe3\007" +
    "\uffe3\010\uffe3\020\uffe3\022\uffe3\024\uffe3\026\uffe3\032\uffe3" +
    "\050\uffe3\060\uffe3\061\uffe3\064\uffe3\001\002\000\004\056" +
    "\376\001\002\000\004\054\377\001\002\000\004\006\u0100" +
    "\001\002\000\004\056\u0101\001\002\000\004\054\u0102\001" +
    "\002\000\032\006\uffe2\007\uffe2\010\uffe2\020\uffe2\022\uffe2" +
    "\024\uffe2\026\uffe2\032\uffe2\050\uffe2\060\uffe2\061\uffe2\064" +
    "\uffe2\001\002\000\006\045\u0104\054\u0105\001\002\000\004" +
    "\006\u0106\001\002\000\032\006\uffbb\007\uffbb\010\uffbb\020" +
    "\uffbb\022\uffbb\024\uffbb\026\uffbb\032\uffbb\050\uffbb\060\uffbb" +
    "\061\uffbb\064\uffbb\001\002\000\004\046\u0107\001\002\000" +
    "\004\054\u0108\001\002\000\032\006\uffba\007\uffba\010\uffba" +
    "\020\uffba\022\uffba\024\uffba\026\uffba\032\uffba\050\uffba\060" +
    "\uffba\061\uffba\064\uffba\001\002\000\006\044\144\056\145" +
    "\001\002\000\004\046\u010b\001\002\000\004\047\u010c\001" +
    "\002\000\046\006\020\007\036\010\016\012\043\013\032" +
    "\014\037\015\041\021\047\024\050\025\031\026\015\027" +
    "\053\030\025\031\017\032\034\056\052\060\044\061\024" +
    "\001\002\000\030\006\020\007\063\010\016\020\u010e\022" +
    "\u010f\024\050\026\015\032\034\050\u0110\060\044\061\024" +
    "\001\002\000\004\050\u011a\001\002\000\004\050\u0115\001" +
    "\002\000\034\006\uffce\007\uffce\010\uffce\011\u0111\020\uffce" +
    "\022\uffce\024\uffce\026\uffce\032\uffce\050\uffce\060\uffce\061" +
    "\uffce\064\uffce\001\002\000\004\047\u0112\001\002\000\046" +
    "\006\020\007\036\010\016\012\043\013\032\014\037\015" +
    "\041\021\047\024\050\025\031\026\015\027\053\030\025" +
    "\031\017\032\034\056\052\060\044\061\024\001\002\000" +
    "\024\006\020\007\063\010\016\024\050\026\015\032\034" +
    "\050\u0114\060\044\061\024\001\002\000\032\006\uffcb\007" +
    "\uffcb\010\uffcb\020\uffcb\022\uffcb\024\uffcb\026\uffcb\032\uffcb" +
    "\050\uffcb\060\uffcb\061\uffcb\064\uffcb\001\002\000\034\006" +
    "\uffcd\007\uffcd\010\uffcd\011\u0116\020\uffcd\022\uffcd\024\uffcd" +
    "\026\uffcd\032\uffcd\050\uffcd\060\uffcd\061\uffcd\064\uffcd\001" +
    "\002\000\004\047\u0117\001\002\000\046\006\020\007\036" +
    "\010\016\012\043\013\032\014\037\015\041\021\047\024" +
    "\050\025\031\026\015\027\053\030\025\031\017\032\034" +
    "\056\052\060\044\061\024\001\002\000\024\006\020\007" +
    "\063\010\016\024\050\026\015\032\034\050\u0119\060\044" +
    "\061\024\001\002\000\032\006\uffca\007\uffca\010\uffca\020" +
    "\uffca\022\uffca\024\uffca\026\uffca\032\uffca\050\uffca\060\uffca" +
    "\061\uffca\064\uffca\001\002\000\032\006\uffcc\007\uffcc\010" +
    "\uffcc\020\uffcc\022\uffcc\024\uffcc\026\uffcc\032\uffcc\050\uffcc" +
    "\060\uffcc\061\uffcc\064\uffcc\001\002\000\006\042\u011c\054" +
    "\u011d\001\002\000\004\057\u011e\001\002\000\032\006\uffe6" +
    "\007\uffe6\010\uffe6\020\uffe6\022\uffe6\024\uffe6\026\uffe6\032" +
    "\uffe6\050\uffe6\060\uffe6\061\uffe6\064\uffe6\001\002\000\004" +
    "\054\u011f\001\002\000\032\006\uffe5\007\uffe5\010\uffe5\020" +
    "\uffe5\022\uffe5\024\uffe5\026\uffe5\032\uffe5\050\uffe5\060\uffe5" +
    "\061\uffe5\064\uffe5\001\002\000\004\063\u0121\001\002\000" +
    "\046\006\020\007\036\010\016\012\043\013\032\014\037" +
    "\015\041\021\047\024\050\025\031\026\015\027\053\030" +
    "\025\031\017\032\034\056\052\060\044\061\024\001\002" +
    "\000\024\006\020\007\063\010\016\024\050\026\015\032" +
    "\034\060\044\061\024\064\u0123\001\002\000\004\032\ufffe" +
    "\001\002\000\004\053\u0125\001\002\000\004\045\u0126\001" +
    "\002\000\004\046\u0127\001\002\000\004\047\u0128\001\002" +
    "\000\046\006\020\007\036\010\016\012\043\013\032\014" +
    "\037\015\041\021\047\024\050\025\031\026\015\027\053" +
    "\030\025\031\017\032\034\056\052\060\044\061\024\001" +
    "\002\000\024\006\020\007\063\010\016\024\050\026\015" +
    "\032\034\050\u012a\060\044\061\024\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\022\005\045\006\034\007\013\011\025\012\026" +
    "\013\050\014\044\015\020\016\041\017\027\020\053\021" +
    "\037\022\054\023\021\024\056\025\032\026\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\061\006\064\007\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\060\005\045" +
    "\006\034\007\013\011\025\012\026\013\050\014\044\015" +
    "\020\016\041\017\027\020\053\021\037\022\054\023\021" +
    "\024\056\025\032\026\055\001\001\000\010\005\061\006" +
    "\064\007\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\130\005\045\006\034\007\013\011\025" +
    "\012\026\013\050\014\044\015\020\016\041\017\027\020" +
    "\053\021\037\022\054\023\021\024\056\025\032\026\055" +
    "\001\001\000\010\005\061\006\064\007\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\134\005\045" +
    "\006\034\007\013\011\025\012\026\013\050\014\044\015" +
    "\020\016\041\017\027\020\053\021\037\022\054\023\021" +
    "\024\056\025\032\026\055\001\001\000\010\005\061\006" +
    "\064\007\063\001\001\000\046\004\136\005\045\006\034" +
    "\007\013\011\025\012\026\013\050\014\044\015\020\016" +
    "\041\017\027\020\053\021\037\022\054\023\021\024\056" +
    "\025\032\026\055\001\001\000\010\005\061\006\064\007" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\202\001\001\000\004\015\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\207\005\045\006\034\007\013\011\025\012" +
    "\026\013\050\014\044\015\020\016\041\017\027\020\053" +
    "\021\037\022\054\023\021\024\056\025\032\026\055\001" +
    "\001\000\010\005\061\006\064\007\063\001\001\000\002" +
    "\001\001\000\046\004\212\005\045\006\034\007\013\011" +
    "\025\012\026\013\050\014\044\015\020\016\041\017\027" +
    "\020\053\021\037\022\054\023\021\024\056\025\032\026" +
    "\055\001\001\000\010\005\061\006\064\007\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\004\230\005\045\006\034\007\013\011\025\012\026\013" +
    "\050\014\044\015\020\016\041\017\027\020\053\021\037" +
    "\022\054\023\021\024\056\025\032\026\055\001\001\000" +
    "\010\005\061\006\064\007\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\244\005\045\006\034\007\013\011\025\012\026" +
    "\013\050\014\044\015\020\016\041\017\027\020\053\021" +
    "\037\022\054\023\021\024\056\025\032\026\055\001\001" +
    "\000\010\005\061\006\064\007\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\262\005" +
    "\045\006\034\007\013\011\025\012\026\013\050\014\044" +
    "\015\020\016\041\017\027\020\053\021\037\022\054\023" +
    "\021\024\056\025\032\026\055\001\001\000\010\005\061" +
    "\006\064\007\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\004\267\005\045\006\034" +
    "\007\013\011\025\012\026\013\050\014\044\015\020\016" +
    "\041\017\027\020\053\021\037\022\054\023\021\024\056" +
    "\025\032\026\055\001\001\000\010\005\061\006\064\007" +
    "\063\001\001\000\046\004\271\005\045\006\034\007\013" +
    "\011\025\012\026\013\050\014\044\015\020\016\041\017" +
    "\027\020\053\021\037\022\054\023\021\024\056\025\032" +
    "\026\055\001\001\000\010\005\061\006\064\007\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\307\005\045\006\034\007\013\011\025\012\026" +
    "\013\050\014\044\015\020\016\041\017\027\020\053\021" +
    "\037\022\054\023\021\024\056\025\032\026\055\001\001" +
    "\000\010\005\061\006\064\007\063\001\001\000\046\004" +
    "\311\005\045\006\034\007\013\011\025\012\026\013\050" +
    "\014\044\015\020\016\041\017\027\020\053\021\037\022" +
    "\054\023\021\024\056\025\032\026\055\001\001\000\010" +
    "\005\061\006\064\007\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\u0109" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\u010c\005\045\006\034\007\013\011\025\012\026\013\050" +
    "\014\044\015\020\016\041\017\027\020\053\021\037\022" +
    "\054\023\021\024\056\025\032\026\055\001\001\000\010" +
    "\005\061\006\064\007\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\004\u0112\005\045\006\034\007\013\011\025\012\026\013" +
    "\050\014\044\015\020\016\041\017\027\020\053\021\037" +
    "\022\054\023\021\024\056\025\032\026\055\001\001\000" +
    "\010\005\061\006\064\007\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\004\u0117\005" +
    "\045\006\034\007\013\011\025\012\026\013\050\014\044" +
    "\015\020\016\041\017\027\020\053\021\037\022\054\023" +
    "\021\024\056\025\032\026\055\001\001\000\010\005\061" +
    "\006\064\007\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\u0121\005\045\006\034\007\013\011\025\012\026" +
    "\013\050\014\044\015\020\016\041\017\027\020\053\021" +
    "\037\022\054\023\021\024\056\025\032\026\055\001\001" +
    "\000\010\005\061\006\064\007\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\u0128\005\045\006\034\007" +
    "\013\011\025\012\026\013\050\014\044\015\020\016\041" +
    "\017\027\020\053\021\037\022\054\023\021\024\056\025" +
    "\032\026\055\001\001\000\010\005\061\006\064\007\063" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LINEA ::= Cadena Linea 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LINEA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STRUCT ::= Struct Llave_a SENTENCIA Llave_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("STRUCT",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETURN ::= Return Parent_a Numero Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETURN ::= Return Parent_a Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RETURN",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SUMA ::= Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SUMA",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MULTIPLICACION ::= Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("MULTIPLICACION",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RESTA ::= Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("RESTA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DIVISION ::= Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIVISION",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TYPEOF ::= Typeof Parent_a Identificador Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TYPEOF",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VOID ::= Void Identificador Parent_a T_dato Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VOID",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VOID ::= Void Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VOID",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASE ::= Case Identificador P_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Default P_puntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE CASE Default P_puntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Continue SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Continue Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DO_WHILE ::= Do Llave_a SENTENCIA Continue Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DO_WHILE ::= Do Llave_a Continue SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= For Parent_a T_dato Identificador Op_atribucion Numero P_coma SENTENCIA_BOOLEANA P_coma Identificador Op_atribucion Numero Parent_c Llave_a SENTENCIA Continue Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-16)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parent_a Identificador P_coma SENTENCIA_BOOLEANA P_coma Identificador Op_incremento Parent_c Llave_a Continue SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= For Parent_a T_dato Identificador Op_atribucion Numero P_coma SENTENCIA_BOOLEANA P_coma Identificador Op_incremento Parent_c Llave_a Continue SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= For Parent_a Identificador Op_atribucion Numero P_coma SENTENCIA_BOOLEANA P_coma Identificador Op_atribucion Numero Parent_c Llave_a Continue SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOR ::= For Parent_a T_dato Identificador Op_atribucion Numero P_coma SENTENCIA_BOOLEANA P_coma Identificador Op_atribucion Numero Parent_c Llave_a Continue SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-16)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Continue Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Continue Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Op_logico Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Op_logico 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_dato Corchete_a Numero Corchete_c Identificador P_coma T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Corchete_a Corchete_c Identificador Op_atribucion Llave_a Numero Numero Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Numeral Define Identificador Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Unsigned Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Unsigned Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Register T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= ERROR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= LINEA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= TYPEOF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= VOID 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include Diple_a SENTENCIA Diple_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

